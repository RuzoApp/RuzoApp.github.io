//GLOBAL VARIABLES
FIREBASE_ROOT = "https://studybuddyapp.firebaseio.com";

//=====================================================================
//                              USERS
//=====================================================================


// ADD NEW USER TO THE DB
function pushNewUser(first_name, last_name, email, study_session_minutes, short_break_minutes, long_break_minutes) {
    // CREATE A REFERENCE TO FIREBASE
    var usersRef = new Firebase(FIREBASE_ROOT + '/Users');

    //SAVE DATA TO FIREBASE
    // I generated a reference to a new location (e.i. assigned the push into a
    // variable (newUserRef)), although it is not necessary, so that we could in the future
    // get the unique ID generated by push() by doing newUserRef.key();
    var newUserRef =  usersRef.push({
        first_name: first_name,
        last_name: last_name,
        email: email,
        study_session_minutes: study_session_minutes,
        short_break_minutes: short_break_minutes,
        long_break_minutes: long_break_minutes
    });
};

// RETRIEVE AND DISPLAY ALL USERS INFORMATION UPON REQUEST
function fetchAllUsers() {
    var usersRef = new Firebase(FIREBASE_ROOT + '/Users');
    var users = [];
    // WE CAN ALWAYS ADD .limitToLast(10) TO usersRef IF WE'D WANT TO DISPLAY JUST THE FIRST 10 USERS.
    usersRef.once("value", function(snapshot) {
        $.each(snapshot.val(), function(key, value){
            users.push(value)
        });
        displayAllUsers(users);
    });
}

//=====================================================================
//                              SUBJECTS
//=====================================================================


// Right now we are allways working with the same user, so I'm hard coding Alice's user id.
// After we'll sort user authentication, we will create the needed functionality to
// get the current user.
function getActiveUser() {
    // TODO: implement authentication
    return "-JsW00pjdJPb_cDgZuxT"
}

// ADD NEW USER TO THE DB
function pushNewSubject(userId, name, colour, study_session_minutes, short_break_minutes, long_break_minutes) {
    // CREATE A REFERENCE TO FIREBASE
    // In case this is the first subject to be pushed, this will create a new Subjects node.
    var subjectsRef = new Firebase(FIREBASE_ROOT + '/Users/' + userId + '/Subjects');

    //SAVE DATA TO FIREBASE
    // I generated a reference to a new location (e.i. assigned the push into a
    // variable (newSubjectRef)), although it is not necessary, so that we could in the future
    // get the unique ID generated by push() by doing newSubjectRef.key();
    var newSubjectRef =  subjectsRef.push({
        name: name,
        colour: colour,
        study_session_minutes: study_session_minutes,
        short_break_minutes: short_break_minutes,
        long_break_minutes: long_break_minutes,
        is_deleted: 0
    });
};

// RETRIEVE AND DISPLAY ALL SUBJECTS INFORMATION UPON REQUEST
function fetchAllSubjects(userId) {
    var subjectsRef = new Firebase(FIREBASE_ROOT + '/Users/' + userId + '/Subjects');
    var subjects = [];
    subjectsRef.once("value", function(snapshot) {
        if (snapshot.numChildren() > 0) {
            $.each(snapshot.val(), function(key, value){
                subjects.push(value)
            });
        }
        displayAllSubjects(subjects);
    });
}


// UPDATE SUBJECT'S NAME
function changeSubjectName(userId, subjectId, newName){
    var subjectsRef = new Firebase(FIREBASE_ROOT + '/Users/' + userId + '/Subjects/' + subjectId);
    subjectsRef.update({
        "name": newName
    });
};


// UPDATE SUBJECT'S COLOUR
function changeSubjectColour(userId, subjectId, newColour){
    var subjectsRef = new Firebase(FIREBASE_ROOT + '/Users/' + userId + '/Subjects/' + subjectId);
    subjectsRef.update({
        "colour": newColour
    });
};


// DELETE SUBJECT
function deleteSubject(userId, subjectId){
    var subjectsRef = new Firebase(FIREBASE_ROOT + '/Users/' + userId + '/Subjects/' + subjectId);
    subjectsRef.update({
        "is_deleted": 1
    });
};